using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using WPF_Ex.Model;
using WPF_Ex.ViewModels;

namespace WPF_Ex
{
    public partial class View : Window
    {
        public View()
        {
            InitializeComponent();
            DataContext = new ViewModels.MainViewModel();

        }
        private void Window_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape) 
            {
                Close(); 
            }
         
            else if (e.Key == Key.F5)
            {
               
            }
        }

        private void dataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var dataGrid = sender as DataGrid;
            if (dataGrid.Items?.Count > 0)
            {
                var sampleItem = dataGrid.Items.GetItemAt(0);
                var itemType = sampleItem.GetType();

                if (itemType != null)
                {
                    dataGrid.Columns.Clear();
                    var props = GetAllProperties(itemType);
                    foreach (var prop in props)
                    {
                        var col = new DataGridTextColumn
                        {
                            Header = prop.Name,
                            Binding = new Binding(prop.Name)
                            {
                                Mode = BindingMode.TwoWay,
                                UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged
                            }
                        };
                        dataGrid.Columns.Add(col);
                    }
                }
            }
        }

        private IEnumerable<PropertyInfo> GetAllProperties(Type type)
        {
            var propertyList = new List<PropertyInfo>();

            while (type != null && type != typeof(object))
            {
                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);
                propertyList.InsertRange(0, props);
                type = type.BaseType;
            }

            return propertyList;
        }
        private void DataGrid_AddingNewItem(object sender, AddingNewItemEventArgs e)
        {
            var viewModel = DataContext as MainViewModel;

            // Kiểm tra nếu viewModel.SelectedItem là một đối tượng ItemModel
            if (viewModel != null && viewModel.SelectedItem != null)
            {
                // So sánh dựa trên thuộc tính SheetName (hoặc thuộc tính khác)
                if (viewModel.SelectedItem.SheetName == "Student")
                {
                    e.NewItem = new Student(); // Tạo đối tượng Student mới
                }
                else if (viewModel.SelectedItem.SheetName == "Teacher")
                {
                    e.NewItem = new Teacher(); // Tạo đối tượng Teacher mới
                }
                else if (viewModel.SelectedItem.SheetName == "Employee")
                {
                    e.NewItem = new Employee(); // Tạo đối tượng Employee mới
                }
                else
                {
                    e.NewItem = new Person(); // Mặc định tạo đối tượng Person
                }
            }
        }
    }
}
