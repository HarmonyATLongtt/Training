<Application x:Class="WPF_Sample.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
               xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:WPF_Sample.Views"
              StartupUri="\Views\MainWindow.xaml">
    <!--StartupUri="\Views\Window1.xaml">-->
   
    <Application.Resources>
        <ResourceDictionary>
            <sys:Double x:Key="StdHeight">25</sys:Double>
            <sys:Double x:Key="StdWidth">75</sys:Double>

            <!--#region SolidCorlor-->
            <SolidColorBrush x:Key="BlackColor" Color="Black" />
            <SolidColorBrush x:Key="WhiteColor" Color="White" />
            <SolidColorBrush x:Key="GrayColor" Color="Gray" />
            <SolidColorBrush x:Key="DefaultColor" Color="LightGray" />
            <SolidColorBrush x:Key="PrimaryColor" Color="DodgerBlue" />
            <SolidColorBrush x:Key="SecondaryColor" Color="DarkGray" />
            <SolidColorBrush x:Key="SuccessColor" Color="ForestGreen" />
            <SolidColorBrush x:Key="InforColor" Color="DeepSkyBlue" />
            <SolidColorBrush x:Key="WarningColor" Color="DarkOrange" />
            <SolidColorBrush x:Key="DangerColor" Color="Red" />

            <!--#endregion-->
            <!--#region Thickness-->
            <Thickness x:Key="Margin-Top-2"  Left="0" Top="2" Right="0" Bottom="0" />
            <Thickness x:Key="Margin-Bottom-2" Left="0" Top="0" Right="0" Bottom="2" />
            <Thickness x:Key="Margin-Left-2" Left="2" Top="0" Right="0" Bottom="0" />
            <Thickness x:Key="Margin-Right-2" Left="0" Top="0" Right="2" Bottom="0" />
            <Thickness x:Key="Margin-BotTop-2" Left="0" Top="2" Right="0" Bottom="2" />
            <Thickness x:Key="Margin-LeftRight-2" Left="2" Top="0" Right="2" Bottom="0" />
            <Thickness x:Key="Margin-All-2" Left="2" Top="2" Right="2" Bottom="2" />
            <!--#endregion-->
            <!--#region Border-->
            <Border x:Key="Rounded-Top-5"  CornerRadius="5,5,0,0" />
            <Border x:Key="Rounded-Bottom-5" CornerRadius="0,0,5,5" />
            <Border x:Key="Rounded-Left-5" CornerRadius="5,0,0,5" />
            <Border x:Key="Rounded-Right-5" CornerRadius="0,5,5,0" />
            <Border x:Key="Rounded-All-5" CornerRadius="5" />

            <Border x:Key="Rounded-All" CornerRadius="5" />
            <!--#endregion-->
            <!--#region BaseStyle-->
            <Style x:Key="ElementBase"  TargetType="{x:Type FrameworkElement}">
                <Setter Property="Margin" Value="0" />
            </Style>
            <Style x:Key="ControlBase"  TargetType="{x:Type Control}" BasedOn="{StaticResource ElementBase}" />

            <!--#endregion-->
            <!--#region Button-->
            <Style x:Key="ButtonBase"  TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ControlBase}">
                <Setter Property="Height" Value="{StaticResource StdHeight}" />
                <Setter Property="Width" Value="{StaticResource StdWidth}" />
            </Style>
            <Style  TargetType="Button" BasedOn="{StaticResource ButtonBase}" />
            <Style x:Key="BorderButtonBase" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBase}">
                <Style.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="5" />
                    </Style>
                </Style.Resources>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">

                                    <Setter Property="Background" Value="LightSkyBlue" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <!--<Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        -->
                <!--<Setter Property="Background" Value="Red" />-->
                <!--

                        <Setter Property="Background" Value="{}" />
                        <Setter Property="Foreground" Value="{TemplateBinding Background}" />
                    </Trigger>
                </Style.Triggers>-->
            </Style>

            <Style x:Key="Btn-Primary" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource PrimaryColor}" />
                <Setter Property="Foreground" Value="{StaticResource WhiteColor}" />
                <Style.Resources ></Style.Resources>
            </Style>
            <Style x:Key="Btn-Secondary" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource SecondaryColor}" />
                <Setter Property="Foreground" Value="{StaticResource WhiteColor}" />
            </Style>
            <Style x:Key="Btn-Success" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource SuccessColor}" />
                <Setter Property="Foreground" Value="{StaticResource WhiteColor}" />
            </Style>
            <Style x:Key="Btn-Infor" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource InforColor}" />
                <Setter Property="Foreground" Value="{StaticResource WhiteColor}" />
            </Style>
            <Style x:Key="Btn-Warning" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource WarningColor}" />
                <Setter Property="Foreground" Value="{StaticResource BlackColor}" />
            </Style>
            <Style x:Key="Btn-Danger" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource DangerColor}" />
                <Setter Property="Foreground" Value="{StaticResource WhiteColor}" />
            </Style>
            <Style x:Key="Btn-Dark" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource BlackColor}" />
                <Setter Property="Foreground" Value="{StaticResource WhiteColor}" />
            </Style>

            <Style x:Key="Btn-Outline-Primary" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource WhiteColor}" />
                <Setter Property="Foreground" Value="{StaticResource PrimaryColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource PrimaryColor}" />
            </Style>
            <Style x:Key="Btn-Outline-Secondary" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource WhiteColor}" />
                <Setter Property="Foreground" Value="{StaticResource SecondaryColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource SecondaryColor}" />
            </Style>
            <Style x:Key="Btn-Outline-Success" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource WhiteColor}" />
                <Setter Property="Foreground" Value="{StaticResource SuccessColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource SuccessColor}" />
            </Style>
            <Style x:Key="Btn-Outline-Infor" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource WhiteColor}" />
                <Setter Property="Foreground" Value="{StaticResource InforColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource InforColor}" />
            </Style>
            <Style x:Key="Btn-Outline-Warning" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource WhiteColor}" />
                <Setter Property="Foreground" Value="{StaticResource WarningColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource WarningColor}" />
            </Style>
            <Style x:Key="Btn-Outline-Danger" TargetType="Button"  BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource WhiteColor}" />
                <Setter Property="Foreground" Value="{StaticResource DangerColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource DangerColor}" />
            </Style>
            <Style x:Key="Btn-Outline-Dark" TargetType="Button" BasedOn="{StaticResource BorderButtonBase}">
                <Setter Property="Background" Value="{StaticResource WhiteColor}" />
                <Setter Property="Foreground" Value="{StaticResource BlackColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource BlackColor}" />
            </Style>

            <!--#endregion-->
            <!--#region TextBox-->
            <Style x:Key="TextBoxBase"  TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource ControlBase}">
                <Setter Property="Height" Value="{StaticResource StdHeight}" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
            </Style>
            <Style  TargetType="TextBox" BasedOn="{StaticResource TextBoxBase}" />
            <!--#endregion-->
            <!--#region TextBlock-->

            <!--<Style x:Key="TextBlockBase"  TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ElementBase}">
                -->
            <!--<Setter Property="Height" Value="{StaticResource StdHeight}"  />-->
            <!--
                <Setter Property="Height" Value="Auto" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                -->
            <!--<Setter Property="VerticalAlignment" Value="Center" />-->

            <!--<Setter Property="Ver" Value="Center" />-->
            <!--
            </Style>
            <Style  TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Stretch" />-->
            <!--</Style>-->
            <!--#endregion-->
            <!--#region ComboBox-->
            <Style x:Key="ComboBoxBase"  TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ControlBase}">
                <Setter Property="Height" Value="{StaticResource StdHeight}" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
            </Style>
            <Style TargetType="ComboBox" BasedOn="{StaticResource ComboBoxBase}">
            </Style>
            <!--#endregion-->
            <Style x:Key="CheckBoxBase" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource ControlBase}">
                <Setter Property="Height" Value="{StaticResource StdHeight}" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            </Style>
            <Style  TargetType="CheckBox"  BasedOn="{StaticResource CheckBoxBase }" />

            <Style  TargetType="ListView"   BasedOn="{StaticResource ElementBase }" />
            <!--#region DataGrid-->
            <Style  TargetType="{x:Type DataGrid}" BasedOn="{StaticResource ElementBase}">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="GridLinesVisibility" Value="None" />

                <!--<Setter Property="AlternatingRowBackground" Value="Gray" />
                <Setter Property="AlternationCount" Value="2" />-->
                <Setter Property="ColumnHeaderStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridColumnHeader">
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="CellStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridCell">

                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--#endregion-->
            <!--#region StackPanel-->
            <Style  x:Key="PanelBase" TargetType="{x:Type Panel}" BasedOn="{StaticResource ElementBase}" />

            <Style  TargetType="Panel" BasedOn="{StaticResource PanelBase}" />
            <Style x:Key="StackPanel-Right" TargetType="StackPanel"  BasedOn="{StaticResource PanelBase}">
                <Setter Property="Orientation" Value="Horizontal" />
                <Setter Property="FlowDirection" Value="RightToLeft" />
                <Setter Property="Width" Value="Auto" />
            </Style>
            <Style x:Key="StackPanel-Left" TargetType="StackPanel"  BasedOn="{StaticResource PanelBase}">
                <Setter Property="Orientation" Value="Horizontal" />
                <Setter Property="FlowDirection" Value="LeftToRight" />
                <Setter Property="Width" Value="Auto" />
            </Style>
            <Style x:Key="StackPanel-Top" TargetType="StackPanel"   BasedOn="{StaticResource PanelBase}">
                <Setter Property="Orientation" Value="Vertical" />
                <Setter Property="FlowDirection" Value="LeftToRight" />
                <Setter Property="Width" Value="Auto" />
            </Style>
            <Style x:Key="StackPanel-Bottom" TargetType="StackPanel"   BasedOn="{StaticResource PanelBase}">
                <Setter Property="Orientation" Value="Vertical" />
                <Setter Property="FlowDirection" Value="LeftToRight" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
            </Style>
            <!--#endregion-->
        </ResourceDictionary>
    </Application.Resources>
</Application>