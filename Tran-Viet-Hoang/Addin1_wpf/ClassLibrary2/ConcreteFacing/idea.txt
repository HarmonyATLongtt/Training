	Dữ liệu bên trái giao diện được binding với  List Category lấy được từ những highlight
element ( cụ thể đối tượng cần biding là content của Button , đồng thời số lượng button sẽ thay 
đổi cùng với số lượng category lấy được, nên button trong xaml nên để trogn datatemplate)

	 Dữ liệu bên phải là 1 list view, sử dụng datatemplate cho các item bên trong vì các item
kết cấu UI giống nhau. Các dữ liệu của item như source (image), name (checkbox) , name (image), 
name (label : face name), name (textbox : thickness), content (label: face name) sẽ được binding 
đến class chứa list dữ liệu face cover.
	=> Khi lựa chọn xong các element cần set cover, thì lập tức thu về 1 list category, 1 list
data về elem (face, face normal...) (nếu finish việc pick object mà không có elem nào được highlight
thì thay vì hiện ui, sẽ hiện noti là bạn chưa chọn và kết thúc). Sau đó UI sẽ hiện lên, bên trái 
giao diện được binding với dữ liệu list category ( "Content" của button binding với category name 
trong list category).Bên phải là listview binding với button ở bên treeview, để lúc ui mới hiện 
lên, khi người dùng chưa chọn bất kì category nào thì listview sẽ chỉ trống trơn
 
( https://stackoverflow.com/questions/20908266/hide-list-view-until-button-is-pressed)
. "Command" của button sẽ được binding với hàm ElemUI(), hàm này sẽ tạo một list dữ liệu để đưa vào
source của DataTemplate trong ListView